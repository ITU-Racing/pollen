/*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  */

import React, { useRef, useEffect, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { MeshStandardMaterial } from "three";

export default function Modell({ selectedCategory, selectedColor, ...props }) {
  const { nodes, materials } = useGLTF("medias/gitarraaa.glb");

  const [lastColors, setLastColors] = useState({
    "Guitar Body": "#F0EBCD",
    "Guitar Neck": "#F0EBCD",
    "Pickguard": "#F0EBCD",
    "Buttons": "#F0EBCD"
  });
    
    const colorMap = {
      "GuitarBodyWhite" : "#FFFFFF",
      "GuitarBodyPink": "#E281E7",
      "GuitarBodyBlue": "#3C6193",
      "GuitarBodyBlack": "#343434",
      "GuitarBodyNavyBlue": "#06294F",
      "GuitarBodyRed": "#A60000",
      "GuitarBodyYellow": "#E5B206",
      "GuitarBodyGreen": "#4AB246",
      "GuitarBodyGray": "#616161",
      "PickguardWhite": "#FCFCFC",
      "PickguardBlack": "#0A0A0A",
      "ButtonsBlack": "#0A0A0A",
      "ButtonsGray": "#4A4A4A",
      "GuitarNeckDark": "#464335",
      "GuitarNeckLight": "#634E39"
    };


    console.log("Selected Category:", selectedCategory);
    console.log("Selected Color:", selectedColor);

    

    useEffect(() => {
      console.log("ðŸ”„ lastColors deÄŸiÅŸti:", lastColors);
    }, [lastColors]);
  
    const updateColorForCategory = () => {
      if (selectedCategory && selectedColor) {
        const safeCategory = selectedCategory.replace(/\s+/g, '');
        const fullKey = `${safeCategory}${selectedColor}`;
        console.log("fullKey:", fullKey)
        if (colorMap[fullKey]) {
          
          setLastColors(prev => ({
            ...prev,
            [selectedCategory]: colorMap[fullKey]
          }));
        } else {
          console.warn("Key not found in colorMap:", fullKey);
        }

      }
      console.log("ðŸ§  Son renkler:", lastColors);
    };
    
    
    const getColorForCategory = (category) => {
      return lastColors[category] || "#F0EBCD";
    };

    useEffect(() => {
      updateColorForCategory();
    }, [selectedColor, selectedCategory]);

    


    const guitarBody = new MeshStandardMaterial({
      color: getColorForCategory("Guitar Body"),
      roughness: 0.4,
      metalness: 0.1,
    })

    const guitarPickguard = new MeshStandardMaterial({
      color: getColorForCategory("Pickguard"),
      roughness: 0.4,
      metalness: 0.1,
    })

    const guitarButtons = new MeshStandardMaterial({
      color: getColorForCategory("Buttons"),
      roughness: 0.4,
      metalness: 0.1,
    })

    



    const guitarNeck = new MeshStandardMaterial({
      color: getColorForCategory("Guitar Neck"),
      roughness: 1,
      metalness: 0.1,
    })



  return (
    
      <group {...props} dispose={null}>
        <group scale={0.012} position={[0, 1.1, 0]} rotation={[0, 0, 0]}>
          <mesh /*gitar perdeleri*/
            castShadow
            receiveShadow
            geometry={nodes.honeybee3710.geometry}
            material={materials["Metal Pale Grey Edgewear.004"]}
          />
          <mesh /*humbuckerlar +  ses dÃ¼ÄŸmeleri*/
            castShadow
            receiveShadow
            geometry={nodes.honeybee3710_1.geometry}
            material={guitarButtons}
          />
          <mesh /*gitar kulakÃ§Ä±klarÄ±*/
            castShadow
            receiveShadow
            geometry={nodes.honeybee3710_2.geometry}
            material={materials["Metal Pale Grey Edgewear"]}
          />
          <mesh /*gitar telleri*/
            castShadow
            receiveShadow
            geometry={nodes.honeybee3710_3.geometry}
            material={materials["Metal Pale Grey Edgewear.005"]}
          />
          <mesh /* gitar sapÄ± */
            castShadow
            receiveShadow
            geometry={nodes.honeybee3710_4.geometry}
            material={guitarNeck}
          />
          <mesh /*gitar arkasÄ±ndaki yer (deÄŸiÅŸmeyecek) */ 
            castShadow
            receiveShadow
            geometry={nodes.honeybee3710_5.geometry}
            material={nodes.honeybee3710_5.material}
          />
          <mesh /*gitar gÃ¶vdesindeki metal yer*/
            castShadow
            receiveShadow
            geometry={nodes.honeybee3710_6.geometry}
            material={guitarPickguard}
          />
          <mesh /*gitar gÃ¶vdesindeki plastik yer*/
            castShadow
            receiveShadow
            geometry={nodes.honeybee3710_7.geometry}
            material={guitarBody}
          />
        </group>
      </group>

      
    
  );
}

useGLTF.preload("/gitarraaa.glb");
